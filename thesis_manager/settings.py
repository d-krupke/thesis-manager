"""
Django settings for thesis_manager project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-af6ky)dobrl55wpau@w*u*q+s$2e&@ei_*4p*l4-h31#bj)xrh')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', '0') == '1'

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '*').split(',')

# Proxy and CSRF settings for reverse proxy deployment
# Set CSRF_TRUSTED_ORIGINS to include your domain(s) when behind a reverse proxy
# Example: CSRF_TRUSTED_ORIGINS=https://theses.example.com,https://thesis-manager.example.com
csrf_origins = os.environ.get('CSRF_TRUSTED_ORIGINS', '')
CSRF_TRUSTED_ORIGINS = [origin.strip() for origin in csrf_origins.split(',') if origin.strip()]

# Enable these when running behind a reverse proxy (nginx, traefik, etc.)
USE_X_FORWARDED_HOST = os.environ.get('USE_X_FORWARDED_HOST', 'False') == 'True'
USE_X_FORWARDED_PORT = os.environ.get('USE_X_FORWARDED_PORT', 'False') == 'True'

# Enable this when your reverse proxy handles HTTPS
if os.environ.get('SECURE_PROXY_SSL_HEADER', 'False') == 'True':
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'knox',
    'drf_spectacular',
    'theses',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'thesis_manager.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'thesis_manager.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_NAME', 'thesis_manager'),
        'USER': os.environ.get('POSTGRES_USER', 'thesis_user'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', 'thesis_password'),
        'HOST': os.environ.get('POSTGRES_HOST', 'db'),
        'PORT': os.environ.get('POSTGRES_PORT', '5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# For subpath deployment (e.g., /theses/), set FORCE_SCRIPT_NAME in .env
# Example: FORCE_SCRIPT_NAME=/theses
FORCE_SCRIPT_NAME = os.environ.get('FORCE_SCRIPT_NAME', None)

STATIC_URL = os.environ.get('STATIC_URL', '/static/')
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files (User uploads)
MEDIA_URL = os.environ.get('MEDIA_URL', '/media/')
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Login settings
# These URLs must respect FORCE_SCRIPT_NAME for subpath deployments
_script_name = os.environ.get('FORCE_SCRIPT_NAME', '')
LOGIN_URL = f'{_script_name}/accounts/login/'
LOGIN_REDIRECT_URL = f'{_script_name}/'
LOGOUT_REDIRECT_URL = f'{_script_name}/accounts/login/'

# Email settings
EMAIL_BACKEND = os.environ.get('EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = os.environ.get('EMAIL_HOST', '')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', '587'))
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True') == 'True'
EMAIL_USE_SSL = os.environ.get('EMAIL_USE_SSL', 'False') == 'True'
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'noreply@thesis-manager.local')
SERVER_EMAIL = os.environ.get('SERVER_EMAIL', DEFAULT_FROM_EMAIL)

# Email notifications enabled (only if proper email backend is configured)
EMAIL_NOTIFICATIONS_ENABLED = EMAIL_HOST and EMAIL_HOST_USER

# Admin contact information
# ADMINS receive error emails and are the contact point for system issues
# Format: Set ADMIN_EMAIL environment variable
# Example: ADMIN_EMAIL=admin@example.com
admin_email = os.environ.get('ADMIN_EMAIL', '').strip()
ADMINS = [('Admin', admin_email)] if admin_email else []

# Supervisor workload thresholds
# These define when a supervisor's workload is considered low/medium/high
# Workload is based on the number of active (non-completed/non-abandoned) theses
WORKLOAD_LOW_THRESHOLD = int(os.environ.get('WORKLOAD_LOW_THRESHOLD', '3'))
WORKLOAD_MEDIUM_THRESHOLD = int(os.environ.get('WORKLOAD_MEDIUM_THRESHOLD', '5'))

# Security settings for production
# Enable these in .env.prod for production deployments
# See: https://docs.djangoproject.com/en/5.2/ref/settings/#security

# Redirect all HTTP requests to HTTPS (enable in production behind SSL/TLS)
SECURE_SSL_REDIRECT = os.environ.get('SECURE_SSL_REDIRECT', 'False') == 'True'

# Only send session cookie over HTTPS (enable in production)
SESSION_COOKIE_SECURE = os.environ.get('SESSION_COOKIE_SECURE', 'False') == 'True'

# Only send CSRF cookie over HTTPS (enable in production)
CSRF_COOKIE_SECURE = os.environ.get('CSRF_COOKIE_SECURE', 'False') == 'True'

# Browser XSS filter (enable in production)
SECURE_BROWSER_XSS_FILTER = os.environ.get('SECURE_BROWSER_XSS_FILTER', 'False') == 'True'

# Don't allow browsers to guess content types (enable in production)
SECURE_CONTENT_TYPE_NOSNIFF = os.environ.get('SECURE_CONTENT_TYPE_NOSNIFF', 'False') == 'True'

# Prevent site from being displayed in frames (clickjacking protection)
X_FRAME_OPTIONS = os.environ.get('X_FRAME_OPTIONS', 'SAMEORIGIN')

# HTTP Strict Transport Security (HSTS)
# Only enable after testing HTTPS works correctly!
# This tells browsers to only access the site via HTTPS for the specified time
SECURE_HSTS_SECONDS = int(os.environ.get('SECURE_HSTS_SECONDS', '0'))
SECURE_HSTS_INCLUDE_SUBDOMAINS = os.environ.get('SECURE_HSTS_INCLUDE_SUBDOMAINS', 'False') == 'True'
SECURE_HSTS_PRELOAD = os.environ.get('SECURE_HSTS_PRELOAD', 'False') == 'True'

# Django REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'knox.auth.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 50,
}

# Knox settings
# Note: Use a hashlib algorithm callable/path so Knox receives an object
# implementing the standard .update()/.digest() interface.
REST_KNOX = {
    'SECURE_HASH_ALGORITHM': 'hashlib.sha512',
    'AUTH_TOKEN_CHARACTER_LENGTH': 64,
    'TOKEN_TTL': None,  # Tokens don't expire by default
    'USER_SERIALIZER': 'theses.api.serializers.UserSerializer',
    'TOKEN_LIMIT_PER_USER': 10,  # Maximum 10 tokens per user
    'AUTO_REFRESH': False,
}

# drf-spectacular settings
SPECTACULAR_SETTINGS = {
    'TITLE': 'Thesis Manager API',
    'DESCRIPTION': 'API for managing student theses, supervisors, and students',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,
    'SCHEMA_PATH_PREFIX': '/api/',
}
