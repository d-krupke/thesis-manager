# Production Docker Compose Configuration
# ==========================================
#
# This configuration is designed for production deployments behind a top-level nginx
# reverse proxy that handles SSL/TLS termination.
#
# Key differences from development (docker-compose.yml):
# - No code volume mount (uses code baked into Docker image)
# - Gunicorn with multiple workers (no --reload)
# - Restart policies for automatic recovery
# - Simplified networking (uses Docker Compose default network + one external network)
# - Environment variables from .env.prod file
#
# Usage:
#   docker-compose -f docker-compose.prod.yml up -d
#
# Prerequisites:
#   1. Create external network: docker network create nginx_proxy_network
#   2. Create .env.prod file with production configuration
#   3. Build the Docker image
#
# See DEPLOYMENT.md for detailed setup instructions.

services:
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env.prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    # No networks specified - uses Docker Compose default network
    # Only accessible by web and nginx containers in this compose file

  web:
    build: .
    restart: unless-stopped
    # Production command:
    # - Run migrations
    # - Collect static files
    # - Start Gunicorn with 4 workers (adjust based on CPU cores)
    # - No --reload flag (not needed in production)
    command: sh -c "python manage.py migrate && python manage.py collectstatic --noinput && gunicorn thesis_manager.wsgi:application --bind 0.0.0.0:8000 --workers 4 --timeout 120"
    volumes:
      # Only mount persistent data volumes, NOT the code
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    expose:
      - "8000"
    env_file:
      - .env.prod
    depends_on:
      db:
        condition: service_healthy
    # No networks specified - uses Docker Compose default network
    # Can communicate with db and nginx by service name

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    expose:
      - "80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
    depends_on:
      - web
    networks:
      # Connected to both:
      # - default: to communicate with 'web' and access shared volumes
      # - nginx_proxy_network: so top-level nginx can reach this container
      - default
      - nginx_proxy_network

volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  # Only define the external network
  # Docker Compose automatically creates a 'default' network for internal communication
  nginx_proxy_network:
    external: true
